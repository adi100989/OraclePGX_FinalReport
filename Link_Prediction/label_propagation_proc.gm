/****************************************************** 
*   def  Algorithm_1:
*   	initialize labels : for each v in V , l(v)[0]=v
*   	i=0
*   	while(!stop_criteria) do:
*        	i++
*        	propogation:
*           		for each v in V do
*             			 l(v)[i] = argmax over l sum(over all neighbors of v) {l(v)[i-1]== l}
*           		end
*  	 end
*   	return final labeling : l(v)[t] for each v in V, 
*        		    where t is the last executed step
*   
*   def stop_criteria:
*	if either l(v)[i]= l(v)[i-1] for each v in V
*           or l(v)[i]= l(v)[i-2] for each v in V
*           return True
*

**********************************************************/
procedure label_propagation(g:graph,ID:N_P <int>(g) ;label: N_P <int>(g)):int
//procedure label_propagation(g:graph; label: N_P <int>(g)): int
{
 bool stop=false;
 nodeProp <int>(g) label_1;
 nodeProp <int>(g) label_2;
 nodeProp <int>(g) label_next;
 int i=1;
 bool mainStop=false;
 int c;
 bool l1_stop;
 bool l2_stop;

 if( g.numNodes()<=1 ) return 0;

 //let the initial labels be equal to the names of the nodes/vertices

	for(n : g.nodes)
   	{
		n.label= n.ID;
		n.label_1=-99;
		n.label_2=-99;
		n.label_next=-99;

  	 }	

 //algo1 starts

 i=0;
 do
 {      i++;
	mainStop=false;	
	l1_stop=true;
	l2_stop=true;
	foreach(n:g.nodes)
		{
			if((n.label!=n.label_1))
				l1_stop=false;
		}
	foreach(n:g.nodes)
                {
                        if((n.label!=n.label_2))
                                l2_stop=false;
                }
	if(!(l1_stop || l2_stop))
	{

 	foreach(n:g.nodes)
  		{ 
		map<int,int> neighbours;
		neighbours.clear();
               // nodeSet(g) unique_neighbours; //added
               // unique_neighbours.clear();    //added

		foreach(s:n.nbrs)
   		{
      			int temp=s.label;	
			if(neighbours.hasKey(temp))
				neighbours[temp]+=1;
			else
			{		
				neighbours[temp]=1;
				//unique_neighbours.add(s); //added
			}
		}      
		int max_key=-99;
                int j=0;
		//int limit=neighbours.getMaxKey();
		//int limit=g.numNodes();
		int max_value= neighbours.getMaxValue();
		//add start
		//foreach(setElement : unique_neighbours.items)
		foreach(setElement : n.nbrs)
		{	
			int temp=setElement.label;
			if(neighbours[temp] == max_value && max_key<temp)
				max_key=temp;
		}
		//add end	
/*
		while(j<=limit)
		{
			if(neighbours.hasKey(j) && neighbours.hasMaxValue(j))
				max_key=j;
			j++;
		}
*/		if(max_key==-99||max_value==-99)
			max_key=n.label;			
		n.label_next=max_key;
		}
		  	
	foreach(n:g.nodes)
		{
		n.label_2=n.label_1;
                n.label_1=n.label;
                n.label=n.label_next;
		}
 	}
	else 
		mainStop=true;
        }while(!mainStop && i<100);

	map<int,int> labelSet;

        foreach (n : g.nodes) {
                int n_label = n.label; 
                labelSet[n_label] = 1;
        }

        return labelSet.size();

//return i;
}

