Diameter Calculation:
	We first describe why exact computation is infeasible. Assume we have a ‘set’ data structure that supports two functions: add() for adding an item, and size() for returning the count of distinct items. With the set, radii of nodes can be computed as follows: 
(1) For each node i, make a set Si and initialize by adding i to it. 
(2) For each node i, update Si by adding one-step neighbors of i to Si. 
(3) For each node i, continue updating Si by adding 2,3,...-step neighbors of i to Si. If the size of Si before and after the addition does not change, then the node i reached its radius. Iterate until all nodes reach their radii. 


Although simple and clear, the above algorithm requires too much space, O(n2), since there are n nodes and each node requires n space in the end. Since exact implementation is hopeless, we turn to an approximation algorithm for the effective radius and the diameter computation. 


For the purpose, we use the Flajolet-Martin algorithm [Flajolet and Martin 1985; Palmer et al. 2002] for counting the number of distinct elements in a multiset. While many other applicable algorithms exist (e.g., [Beyer et al. 2007; Charikar et al. 2000; Garofalakis and Gibbon 2001]), we choose the Flajolet-Martin algorithm because it gives an unbiased estimate, as well as a tight O(log n) bound for the space complexity [Alon et al. 1996].

References:


PowerGraph/toolkits/graph_analytics/approximate_diameter.cpp
http://people.seas.harvard.edu/~babis/tkdd10.pdf
https://en.wikipedia.org/wiki/Flajolet%E2%80%93Martin_algorithm
http://reports-archive.adm.cs.cmu.edu/anon/ml2008/CMU-ML-08-117.pdf




