/****************************************************************************************************************************************** 
*	Although simple and clear, the exact algorithm requires too much space, O(n2), since there are n nodes and each node 
*	requires n space in the end. An approximation algorithm for the effective radius and the diameter computation is thus chosen.
*	For the purpose, we use the Flajolet-Martin algorithm for counting the number of distinct elements in a multiset. While many 
*	other applicable algorithms exist, we choose the Flajolet-Martin algorithm because it gives an unbiased estimate, as well as a
*	tight O(log n) bound for the space complexity.
*	ALGORITHM:
*	input : Edge file E = {(ki, kj )} - 
*		MaxIter = 256 and K = 32 (as per the paper) - but taking K = 1
*		vector_length = number of nodes (this will be the number of elements in the set)
*	output: Diameter d,
*		Neighborhood N(h) where 1 ≤ h ≤ d
*
*******************************************************************************************************************************************/

procedure FMApproxDiameter( g:graph , ID : N_P <int>(g), vector_length : int, size : int , k1 : int ;  radius : nodeProp<int>(g) ):int
{
 	if( g.numNodes()<=1 ) return 0;
		
	int maxIter = 20;					//MaxIter is set to 256 since real graphs have relatively small effective diameter. 
	//int K = 32; 						//The parameter K(# of bitstrings) is typically set to 32[Flajolet and Martin 1985]  
	//int vector_length1 = vector_length * K;		//but since vector of vectors can't be made in GM , I am taking vector_length * K to store
								// k bitstrings 	

	N_P <vect<int>[vector_length]>(g) bitString_H;  	//bitstring of current hop(h)
	N_P <vect<int>[vector_length]>(g) bitString_H_prev;	//bitstring of previous hop(h-1)
	N_P <int>(g) hop;					//saving the hop number
	N_P <vect<int>[vector_length]>(g) nbrhood;

	//to convert from decimal to binary
	foreach(n : g.nodes)
	{	
		vect<int>[vector_length] bs = 0;
		vect<int>[vector_length] bs1 = 0; 
		int k = k1;
		int offset;	
		while(k>=0)
		{
			k = k- 1;
			offset = 9 - k ;
			int num = (n.ID + k + 2)% g.numNodes();
			int index = size;
			while(num > 0)
			{
				int rem = num % 2;
				num = num / 2;
				bs[index+(offset*size)] = rem;
				index = index -1;
			}
			
		}
		n.bitString_H_prev = bs1;                        //newFMbitstring assigned to every node
                n.bitString_H = bs;

	}

	foreach(n : g.nodes)
	{	
		//vect<int>[vector_length] bs = 0; 		//vect<bool>[vetor_length] doesn't work- tested in bug_testing_1.gm
		//bs[n.ID] = 1;					// since rand() gives the same value , thus making changes using ID.
		//n.bitString_H_prev = bs;			//newFMbitstring assigned to every node
		//n.bitString_H = bs;
		n.hop = 0;					//initialize first hop as 0
		vect<int>[vector_length] z = 0;
		n.nbrhood = z; 
	}

	int h_max = 0;	
	int h = 0; 						//start with hop distance = 1
	vect <double>[vector_length] N_h = 0;

	int changed = 0; 
	while(h <= maxIter)
	{
		changed  = 0;
		h += 1;
		foreach( i : g.nodes)
		{
			 vect<int>[vector_length] bs3 = i.bitString_H;
                         vect<int>[vector_length] bs1 = i.bitString_H_prev;
			 vect<int>[vector_length] bs4 = i.bitString_H;

			foreach( nbr : i.nbrs )
			{
				
				int index = 0;
				//vect<int>[vector_length] bs3 = i.bitString_H;
				//vect<int>[vector_length] bs1 = i.bitString_H_prev;
				vect<int>[vector_length] bs2 = nbr.bitString_H_prev;  
				while(index < vector_length)
				{
					bool x = (bs1[index] == 1) ||(bs2[index] == 1);
					index += 1;
		
					if(x) bs3[index] = 1;
                                        else bs3[index] = 0;
	
				}
			}
				i.bitString_H = bs3;
				i.bitString_H_prev = bs4;				
			//}
				
		i.hop += 1; //increase the hop value by one
		if(i.bitString_H != i.bitString_H_prev )
			changed += 1;		
		}	
		//calculate neighborhood function
		//N(h) = sum_over_i(N(h,i))
		int bl = 0;
		int index =  0;
		for( i : g.nodes )
		{	index = 0;
			bl = 0;	
			vect<int>[vector_length] bs4 = i.bitString_H;

			while( index < vector_length )
			{
				//find the leftmost 0 bit

				if( bs4[index] == 0 )
				{
					bl = index;
					index = vector_length + 1;  // to break out of while
				}	
				index +=1;	
			}
			
			N_h[h] += ((1/0.77351)*pow(2.0, bl));		
		}
		
		if(changed == 0)
		{
			h_max = h;
			h = maxIter + 1; 	// to break while loop
		}
	}
	int j = 0;
	if(changed != 0)h_max = size-1;

	while(j < size)
	{
		if(N_h[j] == 0.9*N_h[h_max])
			return j;		
		j += 1;
	}
	return j-1;
/*	
	int min1 = N_h[0];
	int i = 0;
	while(j < 12)
	{
		if (N_h[j] < min1)
		{
			min1 = N_h[j];
			i = j;
		}
		j = j+1;
}
		return i+1;
*/
// return h_max;	
}


